Write-Host "Started windowsfs pre-start"

function cleanupCerts() {
  Param(
    [string]$certDirectory, [string]$certFile
  )
  rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
  Remove-Item $certFile
  if (Test-Path $certDirectory) {
    Write-Host "Failed to remove cert directory: $certDirectory"
    exit 1
  }
  if (Test-Path $certFile) {
    Write-Host "Failed to remove cert directory: $certFile"
    exit 1
  }
}

<% if p("windows-rootfs.trusted_certs") == "" %>
  $ErrorActionPreference = "Stop";
  trap { $host.SetShouldExit(1) }

  Write-Host "No certs provided"
  # Even though there are no certs in the manifest, we have to clean up any existing
  # certs that may have been placed in the image due to an earlier deploy.
  #
  # If groot does not provide a link, then the version of winc-release being deployed
  # is too old to support providing trusted certificates. As such, there can't be an existing top
  # layer in the rootfs OCI image on disk with the extra certificates and so we can
  # skip the remove layer step.
  <% if_link('groot') do |groot| %>
    <% groot.p('groot.cached_image_uris').each do |uri| %>
      $uri = "<%= uri %>"
      Write-Host "Cleaning any pre-existing certs from the top layer of $uri"
      Write-Host "Acquiring RootfsMutex"

      $mtx = New-Object System.Threading.Mutex($false, "RootfsMutex")
      $thirtyMinutes = 30 * 60 * 1000
      if (!$mtx.WaitOne($thirtyMinutes)) {
        throw "Could not acquire RootfsMutex after 30 minutes"
      }
      C:\var\vcap\packages\hydrate\hydrate.exe remove-layer --ociImage $uri
      if ($LASTEXITCODE -ne 0) {
        Write-Host "hydrate.exe remove-layer failed"
        $mtx.ReleaseMutex()
        Write-Host "Released RootfsMutex"
        exit $LASTEXITCODE
      }
      $mtx.ReleaseMutex()
      Write-Host "Released RootfsMutex"
      Write-Host "hydrate.exe remove-layer succeed for $uri"
    <% end %>
  <% end %>

  Write-Host "Finished windowsfs pre-start"
  exit 0
<% end %>

<% if_p("windows-rootfs.trusted_certs") do |trusted_certs| %>
  $ErrorActionPreference = "Stop";
  trap { $host.SetShouldExit(1) }

  Write-Host "Injecting trusted certs"

  # powershell can't handle multiple certs in one file, so we need to split them up
  Write-Host "Splitting certs"

  $certData = "<%= trusted_certs %>"
  $certFile=[System.IO.Path]::GetTempFileName()
  Set-Content -Value $certData -Path $certFile -Encoding Ascii
  $certDirectory = "c:\var\vcap\data\tmp\windowsfs-trusted-certs"
  rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
  mkdir $certDirectory | Out-Null

  $certSplitterBin = "c:\var\vcap\packages\certsplitter-fs\certsplitter.exe"
  & $certSplitterBin $certFile $certDirectory
  if ($LASTEXITCODE -ne 0) {
    Write-Host "certsplitter failed to split certs"
    cleanupCerts -certDirectory $certDirectory -certFile $certFile
    exit $LASTEXITCODE
  }

  # In practice, there should be a single image uri, however
  # if there's ever more than one, this will take much longer
  # and we should move mutex handling into the cert-injector
  # and create a mutex _per_ image uri.
  Write-Host "Acquiring RootfsMutex"

  $mtx = New-Object System.Threading.Mutex($false, "RootfsMutex")
  $thirtyMinutes = 30 * 60 * 1000
  if (!$mtx.WaitOne($thirtyMinutes)) {
    cleanupCerts -certDirectory $certDirectory -certFile $certFile
    throw "Could not acquire RootfsMutex after 30 minutes"
  }
  Write-Host "Acquired RootfsMutex"

  $grootDriverStore = ""
  $grootImageUris = ""

  <% if_link('groot') do |groot| %>
    $grootDriverStore = "<%= groot.p('groot.driver_store') %>"
    $grootImageUris = "<%= groot.p('groot.cached_image_uris').join(" ") %>"
  <% end %>

  $certInjectorBin = "c:\var\vcap\packages\cert-injector\cert-injector.exe"

  Write-Host "Running cert-injector"
  & $certInjectorBin $grootDriverStore $certDirectory $grootImageUris.Split(" ")
  if ($LASTEXITCODE -ne 0) {
    Write-Host "cert-injector failed injecting trusted certs"
    cleanupCerts -certDirectory $certDirectory -certFile $certFile

    $mtx.ReleaseMutex()
    Write-Host "Released RootfsMutex"

    exit $LASTEXITCODE
  }
  Write-Host "Finished running cert-injector"

  cleanupCerts -certDirectory $certDirectory -certFile $certFile

  Write-Host "Finished injecting trusted certs"

  $mtx.ReleaseMutex()
  Write-Host "Released RootfsMutex"
<% end %>

Write-Host "Finished windowsfs pre-start"
