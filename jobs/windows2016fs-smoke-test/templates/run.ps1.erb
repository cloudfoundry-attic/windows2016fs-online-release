$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }
Write-Host "Starting windowsfs pre-start"

# Happy path test!

$grootBin = "c:\var\vcap\packages\groot\groot.exe"
$wincBin = "c:\var\vcap\packages\winc\winc.exe"
$containerId = "windowsfs-smoke-test" + [System.Math]::Round((date -UFormat %s),0)
$grootDriverStore = "<%= link('groot').p('groot.driver_store') %>"
$grootImageUri = "<%= link('groot').p('groot.cached_image_uris')[0] %>"

$stdOut = (& $grootBin --driver-store $grootDriverStore create $grootImageUri $containerId)
if ($LASTEXITCODE -ne 0) {
  Write-Host "groot create failed"
  exit $LASTEXITCODE
}
$config = $stdOut | ConvertFrom-Json

# Write a config file to be executed on the container that will list the certificates in the store
$processSpec=@"
{"args": ["powershell.exe", "-command", "ls Cert:\\\\LocalMachine\\Root"], "cwd": "C:\\" }
"@
$pObj = $processSpec | convertfrom-json
$config | Add-Member -Force -Name "process" -Value $pObj -MemberType NoteProperty

Write-Host "Writing config.json"
$bundleDir = Join-Path $env:TEMP $containerId
$configPath = Join-Path $bundleDir "config.json"
rm -Recurse -Force -ErrorAction SilentlyContinue $bundleDir
mkdir $bundleDir | Out-Null
$configJson = ($config | ConvertTo-Json)
Set-Content -Path $configPath -Value $configJson

# Create the container to test the expected certificates were injected
Write-Host "winc run"
$stdOut = (& $wincBin run -b $bundleDir $containerId)
if ($LASTEXITCODE -ne 0) {
  Write-Host "winc run failed"
  exit $LASTEXITCODE
}

&$grootBin --driver-store $grootDriverStore delete $containerId
if ($LASTEXITCODE -ne 0) {
  Write-Host "groot delete failed"
  exit $LASTEXITCODE
}

rm -Recurse -Force -ErrorAction SilentlyContinue $bundleDir

# powershell can't handle multiple certs in one file, so we need to split them up
$certData = "<%= p('windows-rootfs.trusted_certs') %>"
$certFile=[System.IO.Path]::GetTempFileName()
Set-Content -Value $certData -Path $certFile -Encoding Ascii
$certDirectory = "c:\var\vcap\data\tmp\windowsfs-trusted-certs"
rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
mkdir $certDirectory | Out-Null

$certSplitterBin = "c:\var\vcap\packages\certsplitter-fs\certsplitter.exe"
& $certSplitterBin $certFile $certDirectory
if ($LASTEXITCODE -ne 0) {
  Write-Host "certsplitter failed to split certs"
  rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
  Remove-Item $certFile
  exit $LASTEXITCODE
}

# Verify that the container has the injected certificates in the system cert store
ls $certDirectory | foreach {
  $file = $certDirectory  + "\" + $_.Name

  $certificateObject = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
  $certificateObject.Import($file, "", [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::DefaultKeySet)
  $expectedThumbprint = $certificateObject.Thumbprint

  if (-not ($stdOut -match $expectedThumbprint)) {
    echo "Test failed, couldn't find $expectedThumbprint in the container"
    rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
    Remove-Item $certFile
    exit 1
  }
}

rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
Remove-Item $certFile

echo "Test succeeded, all certificates found in the container"
exit 0
